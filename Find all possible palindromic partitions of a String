https://practice.geeksforgeeks.org/problems/find-all-possible-palindromic-partitions-of-a-string/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution {
  public:
  bool palcheck(string S, int start,int end){
      int j=end;
      for(int i=start; i<=end; i++){
          
          if(S[i]!=S[j]){
            return 0;
           }
          
           j--;
      }
      
      return 1;
  }
  void sol(string S, int index, vector<string>&path, vector<vector<string>>&ans){
      if(index==S.length()){
          ans.push_back(path);
          return;
      }
     for(int i=index; i<S.size(); i++){
         if(palcheck(S,index,i)){
          path.push_back(S.substr(index,i-index+1));//S.substring(from where , length)
          sol(S,i+1,path,ans);
          path.pop_back();
         }
     }
     return;
  }
    vector<vector<string>> allPalindromicPerms(string S) {
        // code here
        vector<vector<string>> ans;
        vector<string> path;
         sol(S,0,path,ans);
         return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string S;
        
        cin>>S;

        Solution ob;
        vector<vector<string>> ptr = ob.allPalindromicPerms(S);
        
        for(int i=0; i<ptr.size(); i++)
        {
            for(int j=0; j<ptr[i].size(); j++)
            {
                cout<<ptr[i][j]<<" ";
            }
            cout<<endl;
        }
    }
    return 0;
}
// } Driver Code Ends
