https://practice.geeksforgeeks.org/problems/partition-array-to-k-subsets/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
/*You are required to complete this method */

class Solution{
  public:
  bool sol(int a[], int n, int s, int cs, vector<int>&vis,int k){
      if(k==1){
          return 1;
      }
      if(cs>s){
          return 0;
      }
      if(cs==s){
          return sol(a,n,s,0,vis,k-1);
      }
      
      for(int i=0; i<n; i++){
          if(vis[i]==0){
              vis[i]=1;
              bool f = sol(a,n,s,cs+a[i],vis,k);
              if(f){
                  return 1;
              }
              else{
                  vis[i]=0;
              }
          }
      }
      return 0;
  }
    bool isKPartitionPossible(int a[], int n, int k)
    {
         //Your code here
         int sum=0;
         for(int i=0; i<n; i++){
             sum = sum + a[i];
         }
         if(sum%k!=0){
             return 0;
         }
         int s = sum/k;
         vector<int> vis(n,0);
        return  sol(a,n,s,0,vis,k);
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    	int n;
    	
    	cin>>n;
    	int a[n];
    	for(int i=0;i<n;i++)
    	cin>>a[i];
    	int k;
    	cin>>k;
    	Solution obj;
    	cout<<obj.isKPartitionPossible(a, n, k)<<endl;
    }
}
// } Driver Code Ends
